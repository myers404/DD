{"version":3,"file":"configurator-C3dqnBVZ.js","sources":["../../node_modules/svelte/src/internal/disclose-version.js","../../node_modules/svelte/src/version.js","../../src/lib/api/client.js","../../src/lib/utils/sanitizer.js","../../src/lib/stores/configuration.svelte.js","../../src/lib/components/LoadingSpinner.svelte","../../src/lib/components/ErrorBoundary.svelte","../../src/lib/components/OptionCard.svelte","../../src/lib/components/OptionGroup.svelte","../../src/lib/components/ValidationDisplay.svelte","../../src/lib/ConfiguratorApp.svelte","../../src/lib/components/PricingDisplay.svelte"],"sourcesContent":["import { PUBLIC_VERSION } from '../version.js';\n\nif (typeof window !== 'undefined') {\n\t// @ts-expect-error\n\t((window.__svelte ??= {}).v ??= new Set()).add(PUBLIC_VERSION);\n}\n","// generated during release, do not modify\n\n/**\n * The current version, as set in package.json.\n * @type {string}\n */\nexport const VERSION = '5.34.3';\nexport const PUBLIC_VERSION = '5';\n","// web/src/lib/api/client.js\nclass ConfiguratorApiClient {\n  constructor(baseUrl, options = {}) {\n    this.baseUrl = baseUrl || window.__API_BASE_URL__ || 'http://localhost:8080/api/v1';\n    this.modelId = options.modelId;\n    this.authToken = options.authToken || localStorage.getItem('auth_token');\n    this.timeout = options.timeout || 30000;\n\n    console.log('API Client initialized:', {\n      baseUrl: this.baseUrl,\n      modelId: this.modelId,\n      hasAuth: !!this.authToken\n    });\n  }\n\n  async request(endpoint, options = {}) {\n    const url = `${this.baseUrl}${endpoint}`;\n    console.log(`API Request: ${options.method || 'GET'} ${url}`);\n\n    const config = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        ...(this.authToken && { 'Authorization': `Bearer ${this.authToken}` }),\n        ...options.headers\n      },\n      ...options\n    };\n\n    if (config.body && typeof config.body === 'object') {\n      config.body = JSON.stringify(config.body);\n    }\n\n    try {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), this.timeout);\n\n      const response = await fetch(url, {\n        ...config,\n        signal: controller.signal\n      });\n\n      clearTimeout(timeoutId);\n\n      if (!response.ok) {\n        let errorData;\n        try {\n          errorData = await response.json();\n        } catch (e) {\n          errorData = { message: response.statusText };\n        }\n        \n        const errorMessage = errorData.message || errorData.error || `HTTP ${response.status}`;\n        console.error(`API Error Response from ${endpoint}:`, {\n          status: response.status,\n          statusText: response.statusText,\n          errorData,\n          url\n        });\n        \n        const error = new Error(errorMessage);\n        error.status = response.status;\n        error.data = errorData;\n        throw error;\n      }\n\n      const result = await response.json();\n\n      // Debug logging for development\n      if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {\n        console.log(`API Response from ${endpoint}:`, result);\n      }\n\n      // Handle wrapped responses from backend\n      if (result && typeof result === 'object' && result.success !== undefined && result.data !== undefined) {\n        return result.data;\n      }\n\n      // Return result or empty array/object for safety\n      return result ?? (endpoint.includes('/groups') || endpoint.includes('/options') || endpoint.includes('/rules') ? [] : {});\n    } catch (error) {\n      if (error.name === 'AbortError') {\n        throw new Error('Request timeout');\n      }\n      console.error(`API Error for ${endpoint}:`, error);\n      throw error;\n    }\n  }\n\n  // Model Management\n  async getModel() {\n    if (!this.modelId) throw new Error('Model ID required');\n    const model = await this.request(`/models/${this.modelId}`);\n\n    // Ensure we have proper structure\n    if (!model.option_groups && model.groups) {\n      model.option_groups = model.groups;\n    }\n\n    // Log the model structure for debugging\n    console.log('Model structure:', {\n      hasGroups: !!model.groups,\n      hasOptionGroups: !!model.option_groups,\n      hasOptions: !!model.options,\n      groupsCount: model.groups?.length || model.option_groups?.length || 0,\n      optionsCount: model.options?.length || 0\n    });\n\n    return model;\n  }\n\n  async getModelGroups() {\n    if (!this.modelId) throw new Error('Model ID required');\n    const response = await this.request(`/models/${this.modelId}/groups`);\n    // Ensure we return an array\n    return Array.isArray(response) ? response : [];\n  }\n\n  async getModelOptions() {\n    if (!this.modelId) throw new Error('Model ID required');\n    const response = await this.request(`/models/${this.modelId}/options`);\n    // Ensure we return an array\n    return Array.isArray(response) ? response : [];\n  }\n\n  async getModelRules() {\n    if (!this.modelId) throw new Error('Model ID required');\n    const response = await this.request(`/models/${this.modelId}/rules`);\n    // Ensure we return an array\n    return Array.isArray(response) ? response : [];\n  }\n\n  async getModelPricingRules() {\n    if (!this.modelId) throw new Error('Model ID required');\n    const response = await this.request(`/models/${this.modelId}/pricing-rules`);\n    // Ensure we return an array\n    return Array.isArray(response) ? response : [];\n  }\n\n  async getModelStatistics() {\n    if (!this.modelId) throw new Error('Model ID required');\n    return this.request(`/models/${this.modelId}/statistics`);\n  }\n\n  // Configuration Management\n  async createConfiguration(selections = []) {\n    return this.request('/configurations', {\n      method: 'POST',\n      body: {\n        model_id: this.modelId,\n        name: `Configuration ${new Date().toISOString()}`,\n      }\n    });\n  }\n\n  async getConfiguration(configId) {\n    return this.request(`/configurations/${configId}?model_id=${this.modelId}`);\n  }\n\n  async updateConfiguration(configId, updates) {\n    return this.request(`/configurations/${configId}`, {\n      method: 'PUT',\n      body: {\n        model_id: this.modelId,\n        ...updates,\n        selections: updates.selections ? this.formatSelections(updates.selections) : undefined\n      }\n    });\n  }\n\n  async deleteConfiguration(configId) {\n    return this.request(`/configurations/${configId}`, {\n      method: 'DELETE'\n    });\n  }\n\n  async addSelections(configId, selections) {\n    return this.request(`/configurations/${configId}/selections`, {\n      method: 'POST',\n      body: {\n        model_id: this.modelId,\n        selections: this.formatSelections(selections)\n      }\n    });\n  }\n\n  async removeSelection(configId, optionId) {\n    return this.request(`/configurations/${configId}/selections/${optionId}`, {\n      method: 'DELETE'\n    });\n  }\n\n  async validateConfiguration(configId) {\n    return this.request(`/configurations/${configId}/validate?model_id=${this.modelId}`, {\n      method: 'POST',\n      body: {\n        model_id: this.modelId\n      }\n    });\n  }\n\n  async validateSelections(selections) {\n    return this.request('/configurations/validate-selection', {\n      method: 'POST',\n      body: {\n        model_id: this.modelId,\n        selections: this.formatSelections(selections)\n      }\n    });\n  }\n\n  async getAvailableOptions(configId) {\n    return this.request(`/configurations/${configId}/available-options`);\n  }\n\n  async getConstraints(configId) {\n    return this.request(`/configurations/${configId}/constraints`);\n  }\n\n  async getConfigurationSummary(configId) {\n    return this.request(`/configurations/${configId}/summary`);\n  }\n\n  async cloneConfiguration(configId) {\n    return this.request(`/configurations/${configId}/clone`, {\n      method: 'POST'\n    });\n  }\n\n  // Pricing Operations\n  // async calculatePrice(selections, context = {}) {\n  //   return this.request('/pricing/calculate', {\n  //     method: 'POST',\n  //     body: {\n  //       model_id: this.modelId,\n  //       selections: this.formatSelections(selections),\n  //       context\n  //     }\n  //   });\n  // }\n\n  async calculatePrice(configurationId, context = {}) {\n    try {\n      const response = await this.request(`/pricing/calculate`, {\n        method: 'POST',\n        body: {\n          model_id: this.modelId,\n          selections: context.selections || [],\n          customer_id: context.customer_id || null,\n          context: context.context || {}\n        }\n      });\n      return response;\n    } catch (error) {\n      console.error('Failed to calculate price:', error);\n      throw error;\n    }\n  }\n\n  async simulatePricing(scenarios) {\n    return this.request('/pricing/simulate', {\n      method: 'POST',\n      body: {\n        model_id: this.modelId,\n        scenarios\n      }\n    });\n  }\n\n  async validatePricing(selections, expectedPrice) {\n    return this.request('/pricing/validate', {\n      method: 'POST',\n      body: {\n        model_id: this.modelId,\n        selections: this.formatSelections(selections),\n        expected_price: expectedPrice\n      }\n    });\n  }\n\n  async getPricingRules() {\n    if (!this.modelId) throw new Error('Model ID required');\n    return this.request(`/pricing/rules/${this.modelId}`);\n  }\n\n  async getVolumeTiers() {\n    if (!this.modelId) throw new Error('Model ID required');\n    return this.request(`/pricing/volume-tiers/${this.modelId}`);\n  }\n\n  // Model Builder Operations\n  async validateModel() {\n    if (!this.modelId) throw new Error('Model ID required');\n    return this.request(`/models/${this.modelId}/validate`, {\n      method: 'POST'\n    });\n  }\n\n  async detectConflicts(ruleIds = []) {\n    if (!this.modelId) throw new Error('Model ID required');\n    return this.request(`/models/${this.modelId}/conflicts`, {\n      method: 'POST',\n      body: { rule_ids: ruleIds }\n    });\n  }\n\n  async analyzeImpact(changes) {\n    if (!this.modelId) throw new Error('Model ID required');\n    return this.request(`/models/${this.modelId}/impact`, {\n      method: 'POST',\n      body: changes\n    });\n  }\n\n  async getModelQuality() {\n    if (!this.modelId) throw new Error('Model ID required');\n    return this.request(`/models/${this.modelId}/quality`, {\n      method: 'POST'\n    });\n  }\n\n  async getOptimizationRecommendations() {\n    if (!this.modelId) throw new Error('Model ID required');\n    return this.request(`/models/${this.modelId}/optimize`, {\n      method: 'POST'\n    });\n  }\n\n  // Utility Methods\n  formatSelections(selections) {\n    if (Array.isArray(selections)) {\n      return selections;\n    }\n\n    // Convert object format to array format\n    return Object.entries(selections)\n        .filter(([_, quantity]) => quantity > 0)\n        .map(([option_id, quantity]) => ({\n          option_id,\n          quantity: parseInt(quantity) || 1\n        }));\n  }\n\n  // Batch Operations\n  async batchValidate(configurations) {\n    return this.request('/configurations/validate', {\n      method: 'POST',\n      body: { configurations }\n    });\n  }\n\n  async bulkCalculatePricing(configurations) {\n    return this.request('/pricing/bulk-calculate', {\n      method: 'POST',\n      body: { configurations }\n    });\n  }\n\n  // Health Check\n  async checkHealth() {\n    return this.request('/health');\n  }\n\n  async getStatus() {\n    return this.request('/status');\n  }\n}\n\nexport default ConfiguratorApiClient;","// web/src/lib/utils/sanitizer.js\n\n/**\n * Check if a string contains code patterns\n */\nexport function containsCode(text) {\n    if (typeof text !== 'string') return false;\n\n    const codePatterns = [\n        '=>',              // Arrow functions\n        'function',        // Function keyword\n        '$props',         // Svelte internals\n        '$',              // Any Svelte internal\n        '$.strict_equals', // Svelte runtime\n        'return ',         // Return statements\n        '${',              // Template literals\n        '() =>',           // Arrow function pattern\n        '} else',          // Control flow\n        'if (',            // Conditionals\n        '.selection_type',  // Property access that looks like code\n        'strict_equals',   // Function names\n        'min_selections',  // When preceded by dots\n        'max_selections',  // When preceded by dots\n    ];\n\n    return codePatterns.some(pattern => text.includes(pattern));\n}\n\n/**\n * Sanitize text by removing code patterns\n */\nexport function sanitizeText(text, fallback = '') {\n    // Handle non-string inputs\n    if (text === null || text === undefined) return fallback;\n\n    // Convert to string if needed\n    const textStr = String(text);\n\n    // Check if it's already a normal string\n    if (typeof text === 'string' && !containsCode(textStr)) {\n        return textStr;\n    }\n\n    // Log when we detect code\n    if (containsCode(textStr)) {\n        console.warn('[Sanitizer] Code pattern detected and removed:', {\n            original: textStr.substring(0, 100) + (textStr.length > 100 ? '...' : ''),\n            fallback: fallback\n        });\n        return fallback;\n    }\n\n    return textStr;\n}\n\n/**\n * Sanitize an entire object recursively\n */\nexport function sanitizeObject(obj, fields = ['name', 'description', 'label', 'title', 'text', 'value']) {\n    if (!obj || typeof obj !== 'object') return obj;\n\n    if (Array.isArray(obj)) {\n        return obj.map(item => sanitizeObject(item, fields));\n    }\n\n    const sanitized = { ...obj };\n\n    // Check all string properties, not just specific fields\n    Object.keys(sanitized).forEach(key => {\n        if (typeof sanitized[key] === 'string') {\n            const original = sanitized[key];\n            const cleaned = sanitizeText(original, '');\n            if (original !== cleaned) {\n                console.warn(`[Sanitizer] Cleaned field '${key}' in object`);\n                sanitized[key] = cleaned;\n            }\n        } else if (sanitized[key] && typeof sanitized[key] === 'object') {\n            // Recursively sanitize nested objects\n            sanitized[key] = sanitizeObject(sanitized[key], fields);\n        }\n    });\n\n    return sanitized;\n}\n\n/**\n * Create a safe text getter\n */\nexport function safeText(getValue, fallback = '') {\n    try {\n        const value = typeof getValue === 'function' ? getValue() : getValue;\n        return sanitizeText(String(value), fallback);\n    } catch (error) {\n        console.error('[Sanitizer] Error in safeText:', error);\n        return fallback;\n    }\n}\n\n/**\n * Debug helper to check if an object contains code\n */\nexport function debugCheckForCode(obj, path = '') {\n    if (!obj || typeof obj !== 'object') return;\n\n    Object.keys(obj).forEach(key => {\n        const value = obj[key];\n        const currentPath = path ? `${path}.${key}` : key;\n\n        if (typeof value === 'string' && containsCode(value)) {\n            console.error(`[Sanitizer] Code found at ${currentPath}:`, value);\n        } else if (value && typeof value === 'object') {\n            debugCheckForCode(value, currentPath);\n        }\n    });\n}","// web/src/lib/stores/configuration.svelte.js\nimport ConfiguratorApiClient from '../api/client.js';\nimport { sanitizeObject, debugCheckForCode } from '../utils/sanitizer.js';\n\nclass ConfigurationStore {\n  constructor() {\n    // Core state\n    this.modelId = $state('');\n    this.model = $state(null);\n    this.configuration = $state(null);\n    this.selections = $state({});\n    this.validationResults = $state(null);\n    this.pricingData = $state(null);\n    this.availableOptions = $state([]);\n    this.constraints = $state([]);\n\n    // Model data\n    this.groups = $state([]);\n    this.options = $state([]);\n    this.rules = $state([]);\n    this.pricingRules = $state([]);\n    this.volumeTiers = $state([]);\n\n    // Loading states\n    this.isLoading = $state(false);\n    this.isValidating = $state(false);\n    this.isPricing = $state(false);\n    this.isSaving = $state(false);\n\n    // Error handling\n    this.error = $state(null);\n    this.validationErrors = $state([]);\n\n    // Configuration management\n    this.configurationId = $state(null);\n    this.lastSaved = $state(null);\n    this.isDirty = $state(false);\n\n    // UI state\n    this.currentStep = $state(0);\n    this.expandedGroups = $state(new Set());\n    this.hiddenOptions = $state(new Set());\n\n    // API client\n    this.api = null;\n\n    // Internal\n    this._initialized = false;\n    this._debounceTimers = new Map();\n    this._modelLoaded = false;\n  }\n\n  // Initialize store\n  async initialize() {\n    if (this._initialized) return;\n    this._initialized = true;\n\n    console.log('🚀 ConfigurationStore initialized');\n\n    // Setup effects for reactive updates\n    $effect(() => {\n      if (this.modelId && !this.api) {\n        this.api = new ConfiguratorApiClient(window.__API_BASE_URL__, {\n          modelId: this.modelId\n        });\n        this.loadModel();\n      }\n    });\n\n    // Auto-validate and price on selection changes\n    $effect(() => {\n      if (this.configurationId && this.selections && Object.keys(this.selections).length >= 0) {\n        this._debounce('update', () => {\n          this.updateSelectionsOnBackend();\n        }, 300);\n      }\n    });\n  }\n\n  // Computed values\n  get isValid() {\n    return !this.validationResults ||\n        !this.validationResults.violations ||\n        this.validationResults.violations.length === 0;\n  }\n\n  get selectedCount() {\n    return Object.values(this.selections).filter(v => v > 0).length;\n  }\n\n  get progress() {\n    if (!this.model || !this.options) return 0;\n    const totalRequired = this.groups.filter(g => g.required).length;\n    if (totalRequired === 0) return this.selectedCount > 0 ? 100 : 0;\n\n    const completedRequired = this.groups\n        .filter(g => g.required)\n        .filter(g => this.hasGroupSelection(g.id))\n        .length;\n\n    return Math.round((completedRequired / totalRequired) * 100);\n  }\n\n  get totalPrice() {\n    return this.pricingData?.total || this.pricingData?.breakdown?.total_price || 0;\n  }\n\n  get adjustments() {\n    return this.pricingData?.breakdown?.adjustments || [];\n  }\n\n  get safeGroups() {\n    return Array.isArray(this.groups) ? this.groups : [];\n  }\n\n  get safeOptions() {\n    return Array.isArray(this.options) ? this.options : [];\n  }\n\n  // Model loading\n  async loadModel() {\n    if (!this.api || !this.modelId || this._modelLoaded) return;\n\n    this.isLoading = true;\n    this.error = null;\n\n    try {\n      const model = await this.api.getModel(this.modelId);\n\n      // Sanitize and set model data\n      this.model = sanitizeObject(model);\n      this.groups = model.groups || [];\n      // Filter out inactive options for customer UI\n      this.options = (model.options || []).filter(option => option.is_active !== false);\n      this.rules = model.rules || [];\n      this.pricingRules = model.pricing_rules || [];\n      this.volumeTiers = model.volume_tiers || [];\n\n      // Initialize available options as simple array (will be updated with constraint info later)\n      this.availableOptions = this.options.map(opt => ({\n        option: opt,\n        is_selectable: true,\n        reason: null\n      }));\n\n      this._modelLoaded = true;\n\n      // Expand first few groups by default\n      this.groups.slice(0, 3).forEach(g => this.expandedGroups.add(g.id));\n\n    } catch (error) {\n      console.error('Failed to load model:', error);\n      this.error = {\n        message: error.message || 'Failed to load model',\n        code: error.code || 'MODEL_LOAD_ERROR',\n        details: error\n      };\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  // Configuration management\n  async createConfiguration() {\n    if (!this.api || this.configurationId) return;\n\n    try {\n      const result = await this.api.createConfiguration({\n        model_id: this.modelId,\n        name: `Configuration ${new Date().toISOString()}`\n      });\n\n      this.configuration = result;\n      this.configurationId = result.id;\n\n      // Now update with current selections\n      if (this.selectedCount > 0) {\n        await this.updateSelectionsOnBackend();\n      }\n\n    } catch (error) {\n      console.error('Failed to create configuration:', error);\n      this.error = {\n        message: error.message || 'Failed to create configuration',\n        code: error.code || 'CONFIG_CREATE_ERROR',\n        details: error\n      };\n    }\n  }\n\n  async loadConfiguration(configId) {\n    if (!this.api) return;\n\n    this.isLoading = true;\n\n    try {\n      const config = await this.api.getConfiguration(configId);\n\n      this.configuration = config;\n      this.configurationId = config.id;\n      this.selections = config.selections || {};\n\n      // Load the model if needed\n      if (config.model_id && config.model_id !== this.modelId) {\n        this.modelId = config.model_id;\n        await this.loadModel();\n      }\n\n      // Validate and price\n      await this.validateConfiguration();\n      await this.calculatePricing();\n\n    } catch (error) {\n      console.error('Failed to load configuration:', error);\n      this.error = error;\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  async saveConfiguration() {\n    if (!this.api || !this.configurationId) return false;\n\n    this.isSaving = true;\n\n    try {\n      await this.api.updateConfiguration(this.configurationId, {\n        selections: this.selections,\n        status: 'in_progress'\n      });\n\n      this.lastSaved = new Date();\n      this.isDirty = false;\n\n      return true;\n    } catch (error) {\n      console.error('Failed to save configuration:', error);\n      this.error = error;\n      return false;\n    } finally {\n      this.isSaving = false;\n    }\n  }\n\n  // Selection management\n  updateSelection(optionId, quantity) {\n    if (!optionId) return;\n\n    const newQuantity = quantity > 0 ? 1 : 0;\n    \n    // Find the option and its group to check selection type\n    const option = this.options.find(o => o.id === optionId);\n    if (!option) return;\n    \n    const group = this.groups.find(g => g.id === option.group_id);\n    if (!group) return;\n\n    // For single selection groups, clear other selections in the group\n    if (group.selection_type === 'single' && newQuantity > 0) {\n      const groupOptions = this.options.filter(o => o.group_id === group.id);\n      groupOptions.forEach(opt => {\n        if (opt.id !== optionId && this.selections[opt.id]) {\n          delete this.selections[opt.id];\n        }\n      });\n    }\n\n    if (newQuantity === 0) {\n      delete this.selections[optionId];\n    } else {\n      this.selections[optionId] = newQuantity;\n    }\n\n    this.isDirty = true;\n\n    // Create configuration if needed\n    if (!this.configurationId && this.selectedCount > 0) {\n      this.createConfiguration();\n    }\n  }\n\n  async updateSelectionsOnBackend() {\n    if (!this.api || !this.configurationId) return;\n\n    try {\n      const result = await this.api.addSelections(this.configurationId, {\n        selections: Object.entries(this.selections).map(([optionId, quantity]) => ({\n          option_id: optionId,\n          quantity: quantity\n        }))\n      });\n\n      // Update state from response\n      if (result.configuration) {\n        this.configuration = result.configuration;\n      }\n\n      if (result.validation) {\n        // Handle nested validation structure\n        const validationData = result.validation.result || result.validation;\n        this.validationResults = validationData;\n        this.validationErrors = validationData.violations || [];\n      }\n\n      if (result.available_options) {\n        // Backend returns AvailableOption objects with is_selectable flag\n        this.availableOptions = result.available_options;\n        \n        // Check for required options and auto-select them\n        this.checkAndApplyRequiredOptions(result.available_options);\n        \n        // Also hide unavailable options by filtering the UI list\n        this.updateVisibleOptions();\n      }\n\n      // Call pricing endpoint after successful update\n      if (this.isValid && this.selectedCount > 0 && this.configurationId) {\n        await this.calculatePricing();\n      } else {\n        // Clear pricing if invalid or no selections\n        this.pricingData = null;\n      }\n\n    } catch (error) {\n      console.error('Failed to update selections:', error);\n      // Don't overwrite error state for selection updates - just log\n      // This allows the UI to remain functional even if backend updates fail\n    }\n  }\n\n  // Validation\n  async validateConfiguration() {\n    if (!this.api || !this.configurationId) return;\n\n    this.isValidating = true;\n\n    try {\n      const result = await this.api.validateConfiguration(this.configurationId);\n      // Handle nested validation structure from API\n      const validationData = result.result || result;\n      this.validationResults = validationData;\n      this.validationErrors = validationData.violations || [];\n\n      if (result.available_options) {\n        this.availableOptions = result.available_options;\n      }\n\n    } catch (error) {\n      console.error('Configuration validation failed:', error);\n    } finally {\n      this.isValidating = false;\n    }\n  }\n\n  // Pricing\n  async calculatePricing(context = {}) {\n    if (!this.api || !this.configurationId || this.isPricing) return;\n\n    this.isPricing = true;\n\n    try {\n      // Transform selections to array format with option_id and quantity\n      const selectionsArray = Object.entries(this.selections)\n          .filter(([_, value]) => value > 0)\n          .map(([optionId, _]) => ({\n            option_id: optionId,\n            quantity: 1  // Always 1 as per your requirement\n          }));\n\n      const result = await this.api.calculatePrice(this.configurationId, {\n        selections: selectionsArray,\n        ...context\n      });\n\n      // The API client already unwraps the data\n      this.pricingData = result;\n\n      console.log('Pricing data updated:', this.pricingData);\n    } catch (error) {\n      console.error('Pricing calculation failed:', error);\n      // Set pricing to null but don't show error to user\n      this.pricingData = null;\n    } finally {\n      this.isPricing = false;\n    }\n  }\n\n  // UI helpers\n  isGroupExpanded(groupId) {\n    return this.expandedGroups.has(groupId);\n  }\n\n  toggleGroup(groupId) {\n    if (this.expandedGroups.has(groupId)) {\n      this.expandedGroups.delete(groupId);\n    } else {\n      this.expandedGroups.add(groupId);\n    }\n    // Force reactivity\n    this.expandedGroups = new Set(this.expandedGroups);\n  }\n\n  hasGroupSelection(groupId) {\n    const options = this.safeOptions;\n    return options\n        .filter(o => o.group_id === groupId)\n        .some(o => this.selections[o.id] > 0);\n  }\n\n  getGroupSelectionCount(groupId) {\n    const options = this.safeOptions;\n    return options\n        .filter(o => o.group_id === groupId)\n        .filter(o => this.selections[o.id] > 0)\n        .length;\n  }\n\n  // Check if an option is available based on constraints\n  isOptionAvailable(optionId) {\n    if (!this.availableOptions || this.availableOptions.length === 0) {\n      return true; // If no constraint info, assume available\n    }\n    \n    const availableOption = this.availableOptions.find(ao => \n      (ao.option && ao.option.id === optionId) || ao.id === optionId\n    );\n    \n    return availableOption ? availableOption.is_selectable !== false : true;\n  }\n\n  // Get the reason why an option is not available\n  getOptionUnavailableReason(optionId) {\n    if (!this.availableOptions || this.availableOptions.length === 0) {\n      return null;\n    }\n    \n    const availableOption = this.availableOptions.find(ao => \n      (ao.option && ao.option.id === optionId) || ao.id === optionId\n    );\n    \n    return availableOption && !availableOption.is_selectable ? availableOption.reason : null;\n  }\n\n  // Check for and automatically apply required options based on constraints\n  checkAndApplyRequiredOptions(availableOptions) {\n    let autoSelected = false;\n    \n    // Look for options that must be selected based on current selections and backend constraint info\n    if (Array.isArray(availableOptions)) {\n      for (const availableOption of availableOptions) {\n        const option = availableOption.option || availableOption;\n        const optionId = option.id;\n        \n        // Check if this option is marked as required by the backend\n        if (availableOption.is_required && !this.selections[optionId]) {\n          // For single selection groups, clear other selections first\n          const group = this.groups.find(g => g.id === option.group_id);\n          if (group && group.selection_type === 'single') {\n            const groupOptions = this.options.filter(o => o.group_id === group.id);\n            groupOptions.forEach(opt => {\n              if (opt.id !== optionId && this.selections[opt.id]) {\n                delete this.selections[opt.id];\n              }\n            });\n          }\n          \n          // Auto-select the required option\n          this.selections[optionId] = 1;\n          autoSelected = true;\n          console.log(`Auto-selected required option: ${option.name} (${optionId})`);\n        }\n      }\n    }\n    \n    // If we auto-selected anything, trigger a re-validation to get updated constraint info\n    if (autoSelected) {\n      this.isDirty = true;\n      // Don't trigger immediate update to avoid infinite loops\n      // The reactive effect will handle the next update cycle\n    }\n  }\n\n  // Simple rule condition evaluator\n  evaluateRuleCondition(rule) {\n    // This is a simplified version - the real evaluation happens on the backend\n    // We're just checking if any options mentioned in the rule are selected\n    if (!rule.expression) return false;\n    \n    // Extract option IDs from the rule expression (simple pattern matching)\n    const optionPattern = /\\b(opt_\\w+|cpu_\\w+|ram_\\w+|storage_\\w+)\\b/g;\n    const matches = rule.expression.match(optionPattern) || [];\n    \n    // Check if any of the condition options are selected\n    return matches.some(optionId => this.selections[optionId] > 0);\n  }\n\n  // Extract required option IDs from a rule\n  extractRequiredOptions(rule) {\n    if (!rule.expression) return [];\n    \n    // Look for options after THEN in the expression\n    const thenIndex = rule.expression.indexOf('THEN');\n    if (thenIndex === -1) return [];\n    \n    const afterThen = rule.expression.substring(thenIndex + 4);\n    const optionPattern = /\\b(opt_\\w+|cpu_\\w+|ram_\\w+|storage_\\w+)\\b/g;\n    const matches = afterThen.match(optionPattern) || [];\n    \n    return matches;\n  }\n\n  // Export configuration\n  exportConfiguration() {\n    return {\n      id: this.configurationId,\n      model_id: this.modelId,\n      selections: this.selections,\n      validation: {\n        is_valid: this.isValid,\n        violations: this.validationErrors\n      },\n      pricing: {\n        total_price: this.totalPrice,\n        adjustments: this.adjustments,\n        breakdown: this.pricingData?.breakdown || null,\n        currency: this.pricingData?.currency || 'USD'\n      },\n      metadata: {\n        created: this.configuration?.created_at,\n        updated: this.configuration?.updated_at,\n        saved: this.lastSaved\n      }\n    };\n  }\n\n  // Filter options based on availability from constraints\n  updateVisibleOptions() {\n    if (!this.availableOptions || this.availableOptions.length === 0) {\n      // If no constraint info, show all options\n      return;\n    }\n    \n    // Track which options should be hidden vs disabled\n    this.hiddenOptions = new Set();\n    \n    for (const option of this.options) {\n      const availableOption = this.availableOptions.find(ao => \n        (ao.option && ao.option.id === option.id) || ao.id === option.id\n      );\n      \n      if (availableOption && availableOption.is_selectable === false) {\n        // If option is currently selected, disable but don't hide\n        if (!this.selections[option.id]) {\n          this.hiddenOptions.add(option.id);\n        }\n      }\n    }\n  }\n  \n  // Check if an option should be visible in the UI\n  isOptionVisible(optionId) {\n    if (!this.hiddenOptions) return true;\n    return !this.hiddenOptions.has(optionId);\n  }\n\n  // Reset store\n  reset() {\n    this.selections = {};\n    this.validationResults = null;\n    this.pricingData = null;\n    this.configuration = null;\n    this.configurationId = null;\n    this.currentStep = 0;\n    this.isDirty = false;\n    this.error = null;\n    this.validationErrors = [];\n    this.hiddenOptions = new Set();\n  }\n\n  // Utility method for debouncing\n  _debounce(key, fn, delay) {\n    clearTimeout(this._debounceTimers.get(key));\n    this._debounceTimers.set(key, setTimeout(fn, delay));\n  }\n\n  // Model setter\n  setModelId(modelId) {\n    if (this.modelId !== modelId) {\n      this.reset();\n      this.modelId = modelId;\n      this._modelLoaded = false;\n    }\n  }\n}\n\n// Create singleton instance\nexport const configStore = new ConfigurationStore();\n\n// Export for component usage\nexport default configStore;","<!-- web/src/lib/components/LoadingSpinner.svelte -->\n<script>\n  let {\n    size = 'medium',\n    message = ''\n  } = $props();\n</script>\n\n<div class=\"loading-spinner\" class:small={size === 'small'} class:large={size === 'large'}>\n  <div class=\"spinner\"></div>\n  {#if message}\n    <p class=\"loading-message\">{message}</p>\n  {/if}\n</div>\n\n<style>\n  .loading-spinner {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 12px;\n  }\n\n  .spinner {\n    width: 40px;\n    height: 40px;\n    border: 3px solid #e5e7eb;\n    border-top-color: #3b82f6;\n    border-radius: 50%;\n    animation: spin 1s linear infinite;\n  }\n\n  .loading-spinner.small .spinner {\n    width: 20px;\n    height: 20px;\n    border-width: 2px;\n  }\n\n  .loading-spinner.large .spinner {\n    width: 60px;\n    height: 60px;\n    border-width: 4px;\n  }\n\n  .loading-message {\n    margin: 0;\n    font-size: 14px;\n    color: #6b7280;\n    text-align: center;\n  }\n\n  @keyframes spin {\n    to {\n      transform: rotate(360deg);\n    }\n  }\n</style>","<!-- web/src/lib/components/ErrorBoundary.svelte -->\n<script>\n  import { onMount, onDestroy } from 'svelte';\n\n  let {\n    children,\n    fallback = null,\n    onError = null\n  } = $props();\n\n  let error = $state(null);\n  let hasError = $state(false);\n\n  function handleError(event) {\n    console.error('ErrorBoundary caught:', event.error);\n    error = event.error;\n    hasError = true;\n\n    if (onError) {\n      onError(event.error);\n    }\n\n    // Prevent the error from propagating\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  function reset() {\n    error = null;\n    hasError = false;\n  }\n\n  onMount(() => {\n    // Listen for unhandled errors\n    window.addEventListener('error', handleError);\n    window.addEventListener('unhandledrejection', (event) => {\n      handleError({ error: event.reason });\n    });\n\n    return () => {\n      window.removeEventListener('error', handleError);\n      window.removeEventListener('unhandledrejection', handleError);\n    };\n  });\n</script>\n\n{#if hasError}\n  {#if fallback}\n    {@render fallback(error, reset)}\n  {:else}\n    <div class=\"error-boundary\">\n      <div class=\"error-content\">\n        <div class=\"error-icon\">⚠️</div>\n        <h2 class=\"error-title\">Something went wrong</h2>\n        <p class=\"error-message\">{error?.message || 'An unexpected error occurred'}</p>\n\n        {#if import.meta.env.DEV && error?.stack}\n          <details class=\"error-details\">\n            <summary>Error Details</summary>\n            <pre class=\"error-stack\">{error.stack}</pre>\n          </details>\n        {/if}\n\n        <div class=\"error-actions\">\n          <button class=\"btn btn-primary\" onclick={reset}>\n            Try Again\n          </button>\n          <button class=\"btn btn-secondary\" onclick={() => location.reload()}>\n            Reload Page\n          </button>\n        </div>\n      </div>\n    </div>\n  {/if}\n{:else}\n  {@render children()}\n{/if}\n\n<style>\n  .error-boundary {\n    min-height: 400px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 2rem;\n  }\n\n  .error-content {\n    max-width: 500px;\n    text-align: center;\n  }\n\n  .error-icon {\n    font-size: 3rem;\n    margin-bottom: 1rem;\n  }\n\n  .error-title {\n    margin: 0 0 0.5rem;\n    font-size: 1.5rem;\n    font-weight: 700;\n    color: var(--text-primary, #111827);\n  }\n\n  .error-message {\n    margin: 0 0 1.5rem;\n    font-size: 1rem;\n    color: var(--text-secondary, #6b7280);\n  }\n\n  .error-details {\n    margin: 1rem 0;\n    text-align: left;\n    background: var(--bg-secondary, #f9fafb);\n    border: 1px solid var(--border-color, #e5e7eb);\n    border-radius: 6px;\n    padding: 1rem;\n  }\n\n  .error-details summary {\n    cursor: pointer;\n    font-weight: 500;\n    color: var(--text-secondary, #6b7280);\n    font-size: 0.875rem;\n  }\n\n  .error-stack {\n    margin: 1rem 0 0;\n    padding: 1rem;\n    background: var(--bg-tertiary, #111827);\n    color: var(--text-code, #f3f4f6);\n    border-radius: 4px;\n    font-size: 0.75rem;\n    overflow-x: auto;\n    white-space: pre-wrap;\n    word-break: break-word;\n  }\n\n  .error-actions {\n    display: flex;\n    gap: 1rem;\n    justify-content: center;\n  }\n\n  .btn {\n    padding: 0.75rem 1.5rem;\n    border-radius: 6px;\n    border: none;\n    font-weight: 500;\n    cursor: pointer;\n    transition: all 0.2s;\n    font-size: 1rem;\n  }\n\n  .btn-primary {\n    background: var(--primary-color, #3b82f6);\n    color: white;\n  }\n\n  .btn-primary:hover {\n    background: var(--primary-hover, #2563eb);\n  }\n\n  .btn-secondary {\n    background: var(--bg-secondary, #f3f4f6);\n    color: var(--text-primary, #111827);\n  }\n\n  .btn-secondary:hover {\n    background: var(--bg-tertiary, #e5e7eb);\n  }\n</style>","<!-- web/src/lib/components/OptionCard.svelte -->\n<script>\n  let {\n    option,\n    selected = false,\n    disabled = false,\n    available = true,\n    unavailableReason = null,\n    isRequired = false,\n    selectionType = 'single',\n    onChange\n  } = $props();\n\n  function handleClick() {\n    if (!disabled && available) {\n      // Don't allow deselecting required options\n      if (selected && isRequired) {\n        return;\n      }\n      // Always toggle for both single and multiple\n      // Backend will handle deselecting others for single selection\n      onChange(selected ? 0 : 1);\n    }\n  }\n</script>\n\n<div\n        class=\"option-card\"\n        class:selected\n        class:disabled\n        class:unavailable={!available}\n        class:required={isRequired}\n        onclick={handleClick}\n        role=\"button\"\n        tabindex={disabled || !available ? -1 : 0}\n        onkeydown={(e) => e.key === 'Enter' && handleClick()}\n>\n  <div class=\"option-header\">\n    <input\n            type={selectionType === 'single' ? 'radio' : 'checkbox'}\n            checked={selected}\n            disabled={disabled || !available}\n            onclick={(e) => e.stopPropagation()}\n            tabindex=\"-1\"\n    />\n    <div class=\"option-info\">\n      <h4 class=\"option-name\">\n        {option.name}\n        {#if isRequired}\n          <span class=\"required-badge\">Required</span>\n        {/if}\n      </h4>\n      {#if option.description}\n        <p class=\"option-description\">{option.description}</p>\n      {/if}\n    </div>\n    <div class=\"option-price\">\n      {#if option.price && option.price > 0}\n        <span class=\"price-amount\">${option.price.toFixed(2)}</span>\n      {:else}\n        <span class=\"price-included\">Included</span>\n      {/if}\n    </div>\n  </div>\n\n  {#if !available && (unavailableReason || option.unavailable_reason)}\n    <div class=\"unavailable-reason\">\n      {unavailableReason || option.unavailable_reason}\n    </div>\n  {/if}\n</div>\n\n<style>\n  .option-card {\n    position: relative;\n    border: 2px solid #e5e7eb;\n    border-radius: 8px;\n    padding: 16px;\n    margin-bottom: 12px;\n    background-color: white;\n    transition: all 0.2s ease;\n    cursor: pointer;\n    user-select: none;\n  }\n\n  .option-card:hover:not(.disabled):not(.unavailable) {\n    border-color: #3b82f6;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  }\n\n  .option-card:focus {\n    outline: none;\n    border-color: #3b82f6;\n    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n  }\n\n  .option-card.selected {\n    border-color: #3b82f6;\n    background-color: #eff6ff;\n  }\n  \n  .option-card.required {\n    border-color: #10b981;\n    background-color: #ecfdf5;\n  }\n  \n  .option-card.required.selected {\n    border-color: #059669;\n    background-color: #d1fae5;\n  }\n\n  .option-card.disabled,\n  .option-card.unavailable {\n    opacity: 0.6;\n    cursor: not-allowed;\n    background-color: #f9fafb;\n  }\n\n  .option-header {\n    display: flex;\n    align-items: flex-start;\n    gap: 12px;\n  }\n\n  input[type=\"radio\"],\n  input[type=\"checkbox\"] {\n    margin-top: 2px;\n    width: 20px;\n    height: 20px;\n    flex-shrink: 0;\n    cursor: pointer;\n  }\n\n  .option-info {\n    flex: 1;\n    min-width: 0;\n  }\n\n  .option-name {\n    margin: 0;\n    font-size: 16px;\n    font-weight: 500;\n    color: #111827;\n    line-height: 1.5;\n  }\n\n  .option-description {\n    margin: 4px 0 0 0;\n    font-size: 14px;\n    color: #6b7280;\n    line-height: 1.4;\n  }\n\n  .option-price {\n    flex-shrink: 0;\n    text-align: right;\n  }\n\n  .price-amount {\n    font-size: 18px;\n    font-weight: 600;\n    color: #111827;\n  }\n\n  .price-included {\n    font-size: 14px;\n    color: #10b981;\n    font-weight: 500;\n  }\n\n  .unavailable-reason {\n    margin-top: 8px;\n    padding-top: 8px;\n    border-top: 1px solid #e5e7eb;\n    font-size: 13px;\n    color: #ef4444;\n  }\n  \n  .required-badge {\n    display: inline-block;\n    background-color: #10b981;\n    color: white;\n    padding: 2px 6px;\n    border-radius: 4px;\n    font-size: 11px;\n    font-weight: 600;\n    text-transform: uppercase;\n    margin-left: 8px;\n    vertical-align: middle;\n  }\n</style>","<!-- web/src/lib/components/OptionGroup.svelte -->\n<!-- Showing only the fixed selection text part -->\n<script>\n    import OptionCard from './OptionCard.svelte';\n    import { sanitizeText } from '../utils/sanitizer.js';\n\n    let {\n        group,\n        options = [],\n        selections = {},\n        availableOptions = [],\n        onSelectionChange,\n        expanded = true,\n        onToggle\n    } = $props();\n\n    // Computed values with proper array safety\n    let selectedCount = $derived(\n        Array.isArray(options) ? options.filter(opt => (selections[opt.id] || 0) > 0).length : 0\n    );\n\n    let isComplete = $derived(\n        group.required\n            ? (group.min_selections ? selectedCount >= group.min_selections : selectedCount > 0)\n            : true\n    );\n\n    // Get option state including visibility\n    function getOptionState(option) {\n        const selected = (selections[option.id] || 0) > 0;\n        \n        // Handle both simple array and AvailableOption structure\n        let available = true;\n        let reason = null;\n        let isRequired = false;\n        let shouldHide = false;\n        \n        if (Array.isArray(availableOptions) && availableOptions.length > 0) {\n            // Check if it's an array of AvailableOption objects or simple options\n            const firstItem = availableOptions[0];\n            \n            if (firstItem && typeof firstItem === 'object' && 'is_selectable' in firstItem) {\n                // It's an array of AvailableOption objects\n                const availableOption = availableOptions.find(ao => \n                    (ao.option && ao.option.id === option.id) || ao.id === option.id\n                );\n                \n                if (availableOption) {\n                    available = availableOption.is_selectable !== false;\n                    reason = availableOption.reason || null;\n                    isRequired = availableOption.is_required === true;\n                    \n                    // Hide unavailable options unless they're currently selected\n                    shouldHide = !available && !selected;\n                }\n            } else {\n                // It's a simple array of option IDs or options\n                const availableIds = availableOptions.map(opt => \n                    typeof opt === 'string' ? opt : opt.id\n                );\n                available = availableIds.includes(option.id);\n                shouldHide = !available && !selected;\n            }\n        }\n        \n        const disabled = !available && !selected; // Can always deselect\n\n        return { selected, available, disabled, reason, isRequired, shouldHide };\n    }\n    \n    // Filter visible options based on constraints\n    let visibleOptions = $derived(\n        Array.isArray(options) ? options.filter(option => {\n            const state = getOptionState(option);\n            return !state.shouldHide;\n        }) : []\n    );\n\n    // Handle option change\n    function handleOptionChange(optionId, value) {\n        // Simple on/off - backend handles all constraint logic\n        const newValue = value > 0 ? 1 : 0;\n        if (onSelectionChange) {\n            onSelectionChange(optionId, newValue);\n        }\n    }\n</script>\n\n<div class=\"option-group\" class:complete={isComplete} class:required={group.required}>\n    <div class=\"group-header\" onclick={onToggle} onkeydown={(e) => e.key === 'Enter' && onToggle()} role=\"button\" tabindex=\"0\">\n        <div class=\"group-info\">\n            <h3 class=\"group-name\">\n                {sanitizeText(group.name)}\n                {#if group.required}\n                    <span class=\"required-indicator\">*</span>\n                {/if}\n            </h3>\n            <div class=\"group-meta\">\n        <span class=\"selection-type\">\n          {#if group.selection_type === 'single'}\n            Select one\n          {:else if group.min_selections && group.max_selections}\n            {#if group.min_selections === group.max_selections}\n                Select exactly {group.min_selections}\n            {:else}\n                Select {group.min_selections}-{group.max_selections}\n            {/if}\n          {:else if group.min_selections}\n            Select at least {group.min_selections}\n          {:else if group.max_selections}\n            Select up to {group.max_selections}\n          {:else}\n            Select multiple\n          {/if}\n        </span>\n                {#if selectedCount > 0}\n          <span class=\"selection-count\">\n            {selectedCount} selected\n          </span>\n                {/if}\n            </div>\n        </div>\n\n        <button class=\"expand-toggle\" aria-label={expanded ? 'Collapse' : 'Expand'}>\n            <svg class=\"icon\" class:rotated={!expanded} width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path fill-rule=\"evenodd\" d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\" clip-rule=\"evenodd\" />\n            </svg>\n        </button>\n    </div>\n\n    {#if expanded}\n        <div class=\"group-content\">\n            {#if Array.isArray(visibleOptions) && visibleOptions.length > 0}\n                <div class=\"options-list\">\n                    {#each visibleOptions as option (option.id)}\n                        {@const state = getOptionState(option)}\n                        <OptionCard\n                                {option}\n                                selected={state.selected}\n                                disabled={state.disabled}\n                                available={state.available}\n                                unavailableReason={state.reason}\n                                isRequired={state.isRequired}\n                                selectionType={group.selection_type}\n                                onChange={(value) => handleOptionChange(option.id, value)}\n                        />\n                    {/each}\n                </div>\n            {:else if Array.isArray(options) && options.length > 0}\n                <div class=\"no-available-options\">\n                    <p>No options currently available in this group based on your selections.</p>\n                    <p class=\"constraint-hint\">Try changing other selections to unlock more options.</p>\n                </div>\n            {:else}\n                <div class=\"no-options\">\n                    <p>No options available in this group.</p>\n                </div>\n            {/if}\n        </div>\n    {/if}\n</div>\n\n<style>\n    .option-group {\n        margin-bottom: 24px;\n        border: 1px solid #e5e7eb;\n        border-radius: 12px;\n        overflow: hidden;\n        background: white;\n    }\n\n    .option-group.required:not(.complete) {\n        border-color: #fbbf24;\n    }\n\n    .group-header {\n        padding: 16px 20px;\n        background-color: #f9fafb;\n        cursor: pointer;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        transition: background-color 0.2s;\n    }\n\n    .group-header:hover {\n        background-color: #f3f4f6;\n    }\n\n    .group-info {\n        flex: 1;\n    }\n\n    .group-name {\n        margin: 0;\n        font-size: 18px;\n        font-weight: 600;\n        color: #111827;\n    }\n\n    .required-indicator {\n        color: #ef4444;\n        margin-left: 4px;\n    }\n\n    .group-meta {\n        margin-top: 4px;\n        display: flex;\n        gap: 16px;\n        font-size: 14px;\n    }\n\n    .selection-type {\n        color: #6b7280;\n    }\n\n    .selection-count {\n        color: #3b82f6;\n        font-weight: 500;\n    }\n\n    .expand-toggle {\n        background: none;\n        border: none;\n        padding: 4px;\n        cursor: pointer;\n        color: #6b7280;\n        transition: transform 0.2s;\n    }\n\n    .icon {\n        transition: transform 0.2s;\n    }\n\n    .icon.rotated {\n        transform: rotate(-90deg);\n    }\n\n    .group-content {\n        padding: 16px;\n    }\n\n    /* Options stack vertically in .options-list */\n\n    .no-options,\n    .no-available-options {\n        text-align: center;\n        padding: 32px;\n        color: #6b7280;\n    }\n    \n    .no-available-options {\n        background-color: #fef3c7;\n        border-radius: 8px;\n        border: 1px solid #fbbf24;\n    }\n    \n    .constraint-hint {\n        margin-top: 8px;\n        font-size: 13px;\n        color: #92400e;\n        font-style: italic;\n    }\n</style>","<!-- web/src/lib/components/ValidationDisplay.svelte -->\n<script>\n    let {\n        validationResults,\n        compact = false,\n        onFix\n    } = $props();\n\n    let expandedViolations = $state(new Set());\n    let filterSeverity = $state('all');\n\n    let violations = $derived(validationResults?.violations || []);\n\n    let filteredViolations = $derived(() => {\n        if (filterSeverity === 'all') return violations;\n        return violations.filter(v => v.severity === filterSeverity);\n    });\n\n    let violationCounts = $derived(() => {\n        const counts = { critical: 0, warning: 0, info: 0 };\n        violations.forEach(v => {\n            counts[v.severity || 'warning']++;\n        });\n        return counts;\n    });\n\n    function toggleViolation(id) {\n        const expanded = new Set(expandedViolations);\n        if (expanded.has(id)) {\n            expanded.delete(id);\n        } else {\n            expanded.add(id);\n        }\n        expandedViolations = expanded;\n    }\n\n    function getSeverityIcon(severity) {\n        switch (severity) {\n            case 'critical': return '🚫';\n            case 'warning': return '⚠️';\n            case 'info': return 'ℹ️';\n            default: return '⚠️';\n        }\n    }\n\n    function getSeverityColor(severity) {\n        switch (severity) {\n            case 'critical': return 'error';\n            case 'warning': return 'warning';\n            case 'info': return 'info';\n            default: return 'warning';\n        }\n    }\n\n    function handleFix(violation) {\n        if (onFix && violation.suggestions?.length > 0) {\n            // Apply the first suggestion\n            onFix(violation.suggestions[0]);\n        }\n    }\n</script>\n\n<div class=\"validation-display\" class:compact>\n    {#if validationResults?.is_valid}\n        <div class=\"validation-success\">\n            <div class=\"success-icon\">✅</div>\n            <div class=\"success-content\">\n                <h3>Configuration Valid</h3>\n                <p>All constraints are satisfied. Your configuration is ready.</p>\n            </div>\n        </div>\n    {:else if violations.length > 0}\n        {#if !compact}\n            <div class=\"validation-header\">\n                <h3>Validation Issues ({violations.length})</h3>\n\n                <div class=\"severity-filters\">\n                    <button\n                            class=\"filter-btn\"\n                            class:active={filterSeverity === 'all'}\n                            onclick={() => filterSeverity = 'all'}\n                    >\n                        All ({violations.length})\n                    </button>\n                    {#if violationCounts.critical > 0}\n                        <button\n                                class=\"filter-btn critical\"\n                                class:active={filterSeverity === 'critical'}\n                                onclick={() => filterSeverity = 'critical'}\n                        >\n                            Critical ({violationCounts.critical})\n                        </button>\n                    {/if}\n                    {#if violationCounts.warning > 0}\n                        <button\n                                class=\"filter-btn warning\"\n                                class:active={filterSeverity === 'warning'}\n                                onclick={() => filterSeverity = 'warning'}\n                        >\n                            Warning ({violationCounts.warning})\n                        </button>\n                    {/if}\n                    {#if violationCounts.info > 0}\n                        <button\n                                class=\"filter-btn info\"\n                                class:active={filterSeverity === 'info'}\n                                onclick={() => filterSeverity = 'info'}\n                        >\n                            Info ({violationCounts.info})\n                        </button>\n                    {/if}\n                </div>\n            </div>\n        {/if}\n\n        <div class=\"violations-list\">\n            {#each filteredViolations as violation, index}\n                {@const isExpanded = expandedViolations.has(violation.rule_id || index)}\n                {@const severityColor = getSeverityColor(violation.severity)}\n\n                <div class=\"violation-item {severityColor}\" class:expanded={isExpanded}>\n                    <div\n                            class=\"violation-header\"\n                            onclick={() => toggleViolation(violation.rule_id || index)}\n                    >\n                        <div class=\"violation-icon\">\n                            {getSeverityIcon(violation.severity)}\n                        </div>\n\n                        <div class=\"violation-content\">\n                            <div class=\"violation-message\">{violation.message}</div>\n                            {#if violation.rule_name && !compact}\n                                <div class=\"violation-rule\">Rule: {violation.rule_name}</div>\n                            {/if}\n                        </div>\n\n                        <div class=\"violation-actions\">\n                            {#if violation.suggestions?.length > 0 && onFix}\n                                <button\n                                        class=\"fix-btn\"\n                                        onclick={(e) => {\n                    e.stopPropagation();\n                    handleFix(violation);\n                  }}\n                                        title=\"Apply suggested fix\"\n                                >\n                                    Fix\n                                </button>\n                            {/if}\n\n                            <button class=\"expand-btn\" aria-label={isExpanded ? 'Collapse' : 'Expand'}>\n                                <svg class=\"chevron\" class:rotated={isExpanded} width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"currentColor\">\n                                    <path d=\"M4.646 6.646a.5.5 0 01.708 0L8 9.293l2.646-2.647a.5.5 0 01.708.708l-3 3a.5.5 0 01-.708 0l-3-3a.5.5 0 010-.708z\"/>\n                                </svg>\n                            </button>\n                        </div>\n                    </div>\n\n                    {#if isExpanded}\n                        <div class=\"violation-details\">\n                            {#if violation.details}\n                                <div class=\"detail-section\">\n                                    <h4>Details</h4>\n                                    <p>{violation.details}</p>\n                                </div>\n                            {/if}\n\n                            {#if violation.affected_options?.length > 0}\n                                <div class=\"detail-section\">\n                                    <h4>Affected Options</h4>\n                                    <ul class=\"affected-list\">\n                                        {#each violation.affected_options as option}\n                                            <li>{option.name || option.id}</li>\n                                        {/each}\n                                    </ul>\n                                </div>\n                            {/if}\n\n                            {#if violation.suggestions?.length > 0}\n                                <div class=\"detail-section\">\n                                    <h4>Suggested Actions</h4>\n                                    <div class=\"suggestions\">\n                                        {#each violation.suggestions as suggestion}\n                                            <div class=\"suggestion\">\n                        <span class=\"suggestion-text\">\n                          {#if suggestion.action === 'add'}\n                            Add: {suggestion.option_name || suggestion.option_id}\n                              {#if suggestion.quantity > 1}\n                                  (×{suggestion.quantity})\n                              {/if}\n                          {:else if suggestion.action === 'remove'}\n                            Remove: {suggestion.option_name || suggestion.option_id}\n                          {:else if suggestion.action === 'change'}\n                            Change: {suggestion.description}\n                          {:else}\n                            {suggestion.description}\n                          {/if}\n                        </span>\n                                                {#if onFix}\n                                                    <button\n                                                            class=\"apply-btn\"\n                                                            onclick={() => onFix(suggestion)}\n                                                    >\n                                                        Apply\n                                                    </button>\n                                                {/if}\n                                            </div>\n                                        {/each}\n                                    </div>\n                                </div>\n                            {/if}\n\n                            {#if violation.rule_expression && !compact}\n                                <div class=\"detail-section\">\n                                    <h4>Rule Expression</h4>\n                                    <code class=\"expression\">{violation.rule_expression}</code>\n                                </div>\n                            {/if}\n                        </div>\n                    {/if}\n                </div>\n            {/each}\n        </div>\n    {:else}\n        <div class=\"validation-empty\">\n            <p>Validating configuration...</p>\n        </div>\n    {/if}\n</div>\n\n<style>\n    .validation-display {\n        background: var(--bg-primary, #ffffff);\n        border-radius: 8px;\n        overflow: hidden;\n    }\n\n    .validation-display.compact {\n        background: transparent;\n    }\n\n    .validation-success {\n        display: flex;\n        align-items: center;\n        gap: 1rem;\n        padding: 1.5rem;\n        background: var(--success-bg, #d1fae5);\n        color: var(--success-text, #065f46);\n    }\n\n    .success-icon {\n        font-size: 2rem;\n    }\n\n    .success-content h3 {\n        margin: 0 0 0.25rem;\n        font-size: 1.125rem;\n        font-weight: 600;\n    }\n\n    .success-content p {\n        margin: 0;\n        font-size: 0.875rem;\n    }\n\n    .validation-header {\n        padding: 1rem 1.5rem;\n        border-bottom: 1px solid var(--border-color, #e5e7eb);\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n    }\n\n    .validation-header h3 {\n        margin: 0;\n        font-size: 1.125rem;\n        font-weight: 600;\n    }\n\n    .severity-filters {\n        display: flex;\n        gap: 0.5rem;\n    }\n\n    .filter-btn {\n        padding: 0.25rem 0.75rem;\n        border-radius: 4px;\n        border: 1px solid var(--border-color, #e5e7eb);\n        background: var(--bg-primary, #ffffff);\n        font-size: 0.75rem;\n        cursor: pointer;\n        transition: all 0.2s;\n    }\n\n    .filter-btn:hover {\n        background: var(--bg-secondary, #f9fafb);\n    }\n\n    .filter-btn.active {\n        background: var(--primary-color, #3b82f6);\n        color: white;\n        border-color: var(--primary-color, #3b82f6);\n    }\n\n    .filter-btn.critical.active {\n        background: var(--error-color, #dc2626);\n        border-color: var(--error-color, #dc2626);\n    }\n\n    .filter-btn.warning.active {\n        background: var(--warning-color, #f59e0b);\n        border-color: var(--warning-color, #f59e0b);\n    }\n\n    .filter-btn.info.active {\n        background: var(--info-color, #3b82f6);\n        border-color: var(--info-color, #3b82f6);\n    }\n\n    .violations-list {\n        max-height: 600px;\n        overflow-y: auto;\n    }\n\n    .violation-item {\n        border-bottom: 1px solid var(--border-color, #e5e7eb);\n        transition: background 0.2s;\n    }\n\n    .violation-item:last-child {\n        border-bottom: none;\n    }\n\n    .violation-item.error {\n        border-left: 4px solid var(--error-color, #dc2626);\n    }\n\n    .violation-item.warning {\n        border-left: 4px solid var(--warning-color, #f59e0b);\n    }\n\n    .violation-item.info {\n        border-left: 4px solid var(--info-color, #3b82f6);\n    }\n\n    .violation-header {\n        display: flex;\n        align-items: flex-start;\n        gap: 0.75rem;\n        padding: 1rem 1.5rem;\n        cursor: pointer;\n        transition: background 0.2s;\n    }\n\n    .violation-header:hover {\n        background: var(--bg-secondary, #f9fafb);\n    }\n\n    .violation-icon {\n        font-size: 1.25rem;\n        flex-shrink: 0;\n    }\n\n    .violation-content {\n        flex: 1;\n    }\n\n    .violation-message {\n        font-size: 0.875rem;\n        font-weight: 500;\n        color: var(--text-primary, #111827);\n        line-height: 1.5;\n    }\n\n    .violation-rule {\n        font-size: 0.75rem;\n        color: var(--text-secondary, #6b7280);\n        margin-top: 0.25rem;\n    }\n\n    .violation-actions {\n        display: flex;\n        align-items: center;\n        gap: 0.5rem;\n    }\n\n    .fix-btn,\n    .apply-btn {\n        padding: 0.25rem 0.75rem;\n        border-radius: 4px;\n        border: 1px solid var(--primary-color, #3b82f6);\n        background: var(--primary-color, #3b82f6);\n        color: white;\n        font-size: 0.75rem;\n        font-weight: 500;\n        cursor: pointer;\n        transition: all 0.2s;\n    }\n\n    .fix-btn:hover,\n    .apply-btn:hover {\n        background: var(--primary-hover, #2563eb);\n    }\n\n    .expand-btn {\n        background: none;\n        border: none;\n        padding: 0.25rem;\n        cursor: pointer;\n        color: var(--text-secondary, #6b7280);\n    }\n\n    .chevron {\n        transition: transform 0.2s;\n    }\n\n    .chevron.rotated {\n        transform: rotate(180deg);\n    }\n\n    .violation-details {\n        padding: 0 1.5rem 1rem 3.5rem;\n        background: var(--bg-secondary, #f9fafb);\n    }\n\n    .detail-section {\n        margin-bottom: 1rem;\n    }\n\n    .detail-section:last-child {\n        margin-bottom: 0;\n    }\n\n    .detail-section h4 {\n        margin: 0 0 0.5rem;\n        font-size: 0.75rem;\n        font-weight: 600;\n        text-transform: uppercase;\n        color: var(--text-secondary, #6b7280);\n    }\n\n    .detail-section p {\n        margin: 0;\n        font-size: 0.875rem;\n        color: var(--text-primary, #111827);\n        line-height: 1.5;\n    }\n\n    .affected-list {\n        margin: 0;\n        padding: 0 0 0 1.25rem;\n        font-size: 0.875rem;\n        color: var(--text-primary, #111827);\n    }\n\n    .suggestions {\n        display: flex;\n        flex-direction: column;\n        gap: 0.5rem;\n    }\n\n    .suggestion {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 0.5rem 0.75rem;\n        background: var(--bg-primary, #ffffff);\n        border: 1px solid var(--border-color, #e5e7eb);\n        border-radius: 4px;\n        font-size: 0.875rem;\n    }\n\n    .expression {\n        display: block;\n        padding: 0.5rem 0.75rem;\n        background: var(--bg-tertiary, #111827);\n        color: var(--text-code, #f3f4f6);\n        border-radius: 4px;\n        font-family: monospace;\n        font-size: 0.75rem;\n        overflow-x: auto;\n    }\n\n    .validation-empty {\n        padding: 2rem;\n        text-align: center;\n        color: var(--text-secondary, #6b7280);\n    }\n\n    @media (max-width: 640px) {\n        .validation-header {\n            flex-direction: column;\n            gap: 1rem;\n            align-items: flex-start;\n        }\n\n        .severity-filters {\n            width: 100%;\n            overflow-x: auto;\n        }\n\n        .violation-details {\n            padding-left: 1.5rem;\n        }\n    }\n</style>","<!-- web/src/lib/ConfiguratorApp.svelte -->\n<!-- Simplified: Just selections, live updates, and save -->\n<script>\n  import { onMount, onDestroy } from 'svelte';\n  import { createEventDispatcher } from 'svelte';\n  import { configStore } from './stores/configuration.svelte.js';\n  import LoadingSpinner from './components/LoadingSpinner.svelte';\n  import ErrorBoundary from './components/ErrorBoundary.svelte';\n  import OptionGroup from './components/OptionGroup.svelte';\n  import PricingDisplay from './components/PricingDisplay.svelte';\n  import ValidationDisplay from './components/ValidationDisplay.svelte';\n\n  let {\n    modelId,\n    theme = 'light',\n    apiUrl = '/api/v1',\n    embedMode = false,\n    onComplete = null,\n    onConfigurationChange = null,\n    onError = null,\n    configurationId = null\n  } = $props();\n\n  const dispatch = createEventDispatcher();\n\n  let mounted = $state(false);\n  // let autoSaveInterval = null; // Auto-save disabled for now\n\n  // Set API URL globally\n  if (typeof window !== 'undefined') {\n    window.__API_BASE_URL__ = apiUrl;\n  }\n\n  onMount(async () => {\n    // Initialize store\n    await configStore.initialize();\n\n    // Set model ID\n    configStore.setModelId(modelId);\n\n    // Load existing configuration if provided\n    if (configurationId) {\n      await configStore.loadConfiguration(configurationId);\n    }\n\n    mounted = true;\n\n    // Set theme\n    document.documentElement.setAttribute('data-theme', theme);\n\n    // Auto-save disabled for now\n    // autoSaveInterval = setInterval(() => {\n    //   if (configStore.isDirty && configStore.configurationId) {\n    //     configStore.saveConfiguration();\n    //   }\n    // }, 30000); // Every 30 seconds\n  });\n\n  onDestroy(() => {\n    // Auto-save disabled for now\n    // if (autoSaveInterval) {\n    //   clearInterval(autoSaveInterval);\n    // }\n  });\n\n  // Debug: log pricing updates\n  $effect(() => {\n    if (configStore.pricingData) {\n      console.log('Pricing updated:', configStore.pricingData);\n    }\n  });\n\n  // Watch for configuration changes\n  $effect(() => {\n    if (mounted && configStore.configuration && onConfigurationChange) {\n      onConfigurationChange(configStore.exportConfiguration());\n    }\n  });\n\n  // Watch for errors\n  $effect(() => {\n    if (configStore.error && onError) {\n      onError(configStore.error);\n    }\n  });\n\n  async function handleSave() {\n    if (configStore.isSaving) return; // Prevent double-clicks\n\n    const saved = await configStore.saveConfiguration();\n    if (saved) {\n      if (onComplete) {\n        onComplete(configStore.exportConfiguration());\n      }\n      dispatch('complete', configStore.exportConfiguration());\n    }\n  }\n\n  function retry() {\n    configStore.error = null;\n    configStore.loadModel();\n  }\n</script>\n\n<div class=\"configurator-app\" class:embed-mode={embedMode}>\n  <ErrorBoundary>\n    {#if !mounted}\n      <div class=\"loading-container\">\n        <LoadingSpinner size=\"large\" message=\"Initializing configurator...\" />\n      </div>\n    {:else if configStore.error}\n      <div class=\"error-container\">\n        <div class=\"error-content\">\n          <div class=\"error-icon\">⚠️</div>\n          <h2>Configuration Error</h2>\n          <p>{configStore.error.message || 'Failed to load configuration'}</p>\n          <button class=\"retry-button\" onclick={retry}>\n            Try Again\n          </button>\n        </div>\n      </div>\n    {:else if configStore.isLoading}\n      <div class=\"loading-container\">\n        <LoadingSpinner size=\"large\" message=\"Loading model...\" />\n      </div>\n    {:else if !configStore.model}\n      <div class=\"error-container\">\n        <div class=\"error-content\">\n          <h2>Model Not Found</h2>\n          <p>The requested model could not be loaded.</p>\n        </div>\n      </div>\n    {:else}\n      <div class=\"configurator-layout\">\n        <!-- Header -->\n        <div class=\"configurator-header\">\n          <div>\n            <h1>{configStore.model.name}</h1>\n            {#if configStore.model.description}\n              <p>{configStore.model.description}</p>\n            {/if}\n          </div>\n          <div class=\"header-actions\">\n            {#if configStore.configurationId}\n              <span class=\"config-id\">ID: {configStore.configurationId}</span>\n            {/if}\n            {#if configStore.lastSaved}\n              <span class=\"last-saved\">Saved {new Date(configStore.lastSaved).toLocaleTimeString()}</span>\n            {/if}\n          </div>\n        </div>\n\n        <!-- Main Content -->\n        <div class=\"configurator-content\">\n          <!-- Left: Options -->\n          <div class=\"options-panel\">\n            {#if configStore.isValidating}\n              <div class=\"validating-indicator\">\n                <LoadingSpinner size=\"small\" /> Checking availability...\n              </div>\n            {/if}\n\n            {#if Array.isArray(configStore.groups) && configStore.groups.length > 0}\n              <div class=\"groups-container\">\n                {#each configStore.groups as group (group.id)}\n                  {@const groupOptions = Array.isArray(configStore.options)\n                          ? configStore.options.filter(o => o.group_id === group.id)\n                          : []}\n                  <OptionGroup\n                          {group}\n                          options={groupOptions}\n                          selections={configStore.selections || {}}\n                          availableOptions={configStore.availableOptions || []}\n                          onSelectionChange={(optionId, value) => configStore.updateSelection(optionId, value)}\n                          expanded={configStore.isGroupExpanded(group.id)}\n                          onToggle={() => configStore.toggleGroup(group.id)}\n                  />\n                {/each}\n              </div>\n            {:else}\n              <div class=\"empty-state\">\n                <p>No option groups available for this model.</p>\n              </div>\n            {/if}\n          </div>\n\n          <!-- Right: Sidebar -->\n          <div class=\"sidebar\">\n            <!-- Validation Display -->\n            {#if configStore.validationResults && !configStore.isValid}\n              <div class=\"sidebar-section validation-section\">\n                <ValidationDisplay\n                        validationResults={configStore.validationResults}\n                        compact={true}\n                />\n              </div>\n            {/if}\n\n            <!-- Pricing Display -->\n            <div class=\"sidebar-section\">\n              <PricingDisplay\n                      pricing={configStore.pricingData}\n                      isCalculating={configStore.isPricing}\n                      selections={configStore.selections || {}}\n                      options={configStore.options || []}\n              />\n            </div>\n\n            <!-- Save Button -->\n            <div class=\"sidebar-actions\">\n              <button\n                      class=\"save-button\"\n                      onclick={handleSave}\n                      disabled={configStore.isSaving || !configStore.isValid || configStore.selectedCount === 0}\n              >\n                {#if configStore.isSaving}\n                  <LoadingSpinner size=\"small\" /> Saving...\n                {:else}\n                  Save Configuration\n                {/if}\n              </button>\n\n              {#if configStore.isDirty}\n                <div class=\"unsaved-indicator\">\n                  <span class=\"unsaved-dot\"></span>\n                  Unsaved changes\n                </div>\n              {/if}\n            </div>\n          </div>\n        </div>\n      </div>\n    {/if}\n  </ErrorBoundary>\n</div>\n\n<style>\n  .configurator-app {\n    min-height: 100vh;\n    background-color: #f9fafb;\n  }\n\n  .configurator-app.embed-mode {\n    min-height: auto;\n    background-color: white;\n  }\n\n  .loading-container,\n  .error-container {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    min-height: 400px;\n    padding: 40px;\n  }\n\n  .error-content {\n    text-align: center;\n    max-width: 400px;\n  }\n\n  .error-icon {\n    font-size: 48px;\n    margin-bottom: 16px;\n  }\n\n  .error-content h2 {\n    margin: 0 0 8px 0;\n    font-size: 24px;\n    color: #111827;\n  }\n\n  .error-content p {\n    margin: 0 0 24px 0;\n    color: #6b7280;\n  }\n\n  .retry-button {\n    background-color: #3b82f6;\n    color: white;\n    border: none;\n    padding: 12px 24px;\n    border-radius: 6px;\n    font-size: 16px;\n    cursor: pointer;\n    transition: background-color 0.2s;\n  }\n\n  .retry-button:hover {\n    background-color: #2563eb;\n  }\n\n  .configurator-layout {\n    max-width: 1280px;\n    margin: 0 auto;\n    padding: 24px;\n  }\n\n  .configurator-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: start;\n    margin-bottom: 32px;\n  }\n\n  .configurator-header h1 {\n    margin: 0 0 8px 0;\n    font-size: 32px;\n    color: #111827;\n  }\n\n  .configurator-header p {\n    margin: 0;\n    font-size: 18px;\n    color: #6b7280;\n  }\n\n  .header-actions {\n    display: flex;\n    flex-direction: column;\n    align-items: flex-end;\n    gap: 4px;\n    font-size: 14px;\n    color: #6b7280;\n  }\n\n  .config-id {\n    font-family: monospace;\n  }\n\n  .configurator-content {\n    display: grid;\n    grid-template-columns: 1fr 380px;\n    gap: 24px;\n    align-items: start;\n  }\n\n  .options-panel {\n    background: white;\n    border-radius: 12px;\n    padding: 24px;\n    min-height: 600px;\n  }\n\n  .validating-indicator {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    padding: 12px;\n    background-color: #fef3c7;\n    border-radius: 6px;\n    margin-bottom: 16px;\n    font-size: 14px;\n    color: #92400e;\n  }\n\n  /* Groups stack vertically with spacing handled by OptionGroup */\n\n  .empty-state {\n    text-align: center;\n    padding: 80px 40px;\n    color: #6b7280;\n  }\n\n  .sidebar {\n    position: sticky;\n    top: 24px;\n  }\n\n  .sidebar-section {\n    background: white;\n    border-radius: 12px;\n    padding: 20px;\n    margin-bottom: 16px;\n  }\n\n  .validation-section {\n    border: 2px solid #fbbf24;\n    background-color: #fffbeb;\n  }\n\n  .sidebar-actions {\n    margin-top: 16px;\n  }\n\n  .save-button {\n    width: 100%;\n    background-color: #10b981;\n    color: white;\n    border: none;\n    padding: 16px;\n    border-radius: 8px;\n    font-size: 16px;\n    font-weight: 500;\n    cursor: pointer;\n    transition: background-color 0.2s;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 8px;\n  }\n\n  .save-button:hover:not(:disabled) {\n    background-color: #059669;\n  }\n\n  .save-button:disabled {\n    background-color: #e5e7eb;\n    color: #9ca3af;\n    cursor: not-allowed;\n  }\n\n  .unsaved-indicator {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 8px;\n    margin-top: 12px;\n    font-size: 14px;\n    color: #6b7280;\n  }\n\n  .unsaved-dot {\n    width: 8px;\n    height: 8px;\n    background-color: #fbbf24;\n    border-radius: 50%;\n    animation: pulse 2s infinite;\n  }\n\n  @keyframes pulse {\n    0%, 100% {\n      opacity: 1;\n    }\n    50% {\n      opacity: 0.5;\n    }\n  }\n\n  /* Responsive */\n  @media (max-width: 1024px) {\n    .configurator-content {\n      grid-template-columns: 1fr;\n    }\n\n    .sidebar {\n      position: static;\n      order: -1;\n    }\n\n    .configurator-header {\n      flex-direction: column;\n      gap: 16px;\n    }\n\n    .header-actions {\n      align-items: flex-start;\n    }\n  }\n</style>","<!-- web/src/lib/components/PricingDisplay.svelte -->\n<script>\n  import LoadingSpinner from './LoadingSpinner.svelte';\n\n  let {\n    pricing = null,\n    isCalculating = false,\n    selections = {},\n    options = []\n  } = $props();\n\n  // Get selected options with details - using proper Svelte 5 $derived\n  let selectedOptions = $derived((() => {\n    if (!Array.isArray(options)) return [];\n\n    return Object.entries(selections || {})\n            .filter(([_, selected]) => selected > 0)\n            .map(([optionId]) => options.find(o => o.id === optionId))\n            .filter(Boolean);\n  })());\n\n  // Calculate totals\n  let baseTotal = $derived(\n          selectedOptions?.reduce((sum, opt) => sum + (opt.price || opt.base_price || 0), 0) || 0\n  );\n\n  let totalAdjustments = $derived(\n          pricing?.breakdown?.adjustments?.reduce((sum, adj) => sum + Math.abs(adj.amount || 0), 0) || 0\n  );\n\n  let finalTotal = $derived(pricing?.total || pricing?.breakdown?.total_price || 0);\n</script>\n\n<div class=\"pricing-display\">\n  <h3 class=\"pricing-title\">Pricing Summary</h3>\n\n  {#if isCalculating}\n    <div class=\"calculating\">\n      <LoadingSpinner size=\"small\" />\n      <span>Calculating price...</span>\n    </div>\n  {:else if selectedOptions.length === 0}\n    <div class=\"empty-pricing\">\n      <p>Select options to see pricing</p>\n    </div>\n  {:else}\n    <!-- Selected Options -->\n    <div class=\"pricing-section\">\n      <h4>Selected Options</h4>\n      <div class=\"line-items\">\n        {#each selectedOptions as option (option.id)}\n          <div class=\"line-item\">\n            <span class=\"item-name\">{option.name}</span>\n            <span class=\"item-price\">\n              ${(option.price || option.base_price || 0).toFixed(2)}\n            </span>\n          </div>\n        {/each}\n      </div>\n      <div class=\"subtotal\">\n        <span>Subtotal</span>\n        <span>${baseTotal.toFixed(2)}</span>\n      </div>\n    </div>\n\n    <!-- Adjustments -->\n    {#if pricing?.breakdown?.adjustments && pricing.breakdown.adjustments.length > 0}\n      <div class=\"pricing-section\">\n        <h4>Adjustments</h4>\n        <div class=\"line-items\">\n          {#each pricing.breakdown.adjustments as adjustment}\n            <div class=\"line-item\" class:discount={adjustment.amount < 0}>\n              <span class=\"item-name\">{adjustment.description || adjustment.rule_name}</span>\n              <span class=\"item-price\">\n                {adjustment.amount < 0 ? '-' : '+'}${Math.abs(adjustment.amount).toFixed(2)}\n              </span>\n            </div>\n          {/each}\n        </div>\n      </div>\n    {/if}\n\n    <!-- Total -->\n    <div class=\"total-section\">\n      <div class=\"total-line\">\n        <span class=\"total-label\">Total</span>\n        <span class=\"total-amount\">${finalTotal.toFixed(2)}</span>\n      </div>\n      {#if totalAdjustments > 0}\n        <div class=\"savings\">\n          Total adjustments: ${totalAdjustments.toFixed(2)}\n        </div>\n      {/if}\n    </div>\n  {/if}\n</div>\n\n<style>\n  .pricing-display {\n    /* Container styles inherited from parent */\n  }\n\n  .pricing-title {\n    margin: 0 0 20px 0;\n    font-size: 20px;\n    font-weight: 600;\n    color: #111827;\n  }\n\n  .calculating {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    padding: 20px;\n    color: #6b7280;\n    font-size: 14px;\n  }\n\n  .empty-pricing {\n    text-align: center;\n    padding: 40px 20px;\n    color: #6b7280;\n  }\n\n  .pricing-section {\n    margin-bottom: 20px;\n    padding-bottom: 20px;\n    border-bottom: 1px solid #e5e7eb;\n  }\n\n  .pricing-section h4 {\n    margin: 0 0 12px 0;\n    font-size: 14px;\n    font-weight: 600;\n    text-transform: uppercase;\n    color: #6b7280;\n  }\n\n  .line-items {\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n  }\n\n  .line-item {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    font-size: 14px;\n  }\n\n  .item-name {\n    color: #374151;\n    flex: 1;\n    margin-right: 12px;\n  }\n\n  .item-price {\n    font-weight: 500;\n    color: #111827;\n    white-space: nowrap;\n  }\n\n  .line-item.discount .item-price {\n    color: #10b981;\n  }\n\n  .subtotal {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-top: 12px;\n    padding-top: 12px;\n    border-top: 1px solid #f3f4f6;\n    font-weight: 500;\n  }\n\n  .total-section {\n    margin-top: 20px;\n    padding-top: 20px;\n    border-top: 2px solid #e5e7eb;\n  }\n\n  .total-line {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n\n  .total-label {\n    font-size: 18px;\n    font-weight: 600;\n    color: #111827;\n  }\n\n  .total-amount {\n    font-size: 24px;\n    font-weight: 700;\n    color: #111827;\n  }\n\n  .savings {\n    margin-top: 8px;\n    font-size: 14px;\n    color: #10b981;\n    text-align: right;\n  }\n</style>"],"names":["window","_a","__svelte","v","Set","add","ConfiguratorApiClient","constructor","baseUrl","options","this","__API_BASE_URL__","modelId","authToken","localStorage","getItem","timeout","console","log","hasAuth","request","endpoint","url","method","config","headers","Authorization","body","JSON","stringify","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","signal","clearTimeout","ok","errorData","json","e","message","statusText","errorMessage","error","status","Error","data","result","location","hostname","success","includes","name","getModel","model","option_groups","groups","hasGroups","hasOptionGroups","hasOptions","groupsCount","length","optionsCount","getModelGroups","Array","isArray","getModelOptions","getModelRules","getModelPricingRules","getModelStatistics","createConfiguration","selections","model_id","Date","toISOString","getConfiguration","configId","updateConfiguration","updates","formatSelections","deleteConfiguration","addSelections","removeSelection","optionId","validateConfiguration","validateSelections","getAvailableOptions","getConstraints","getConfigurationSummary","cloneConfiguration","calculatePrice","configurationId","context","customer_id","simulatePricing","scenarios","validatePricing","expectedPrice","expected_price","getPricingRules","getVolumeTiers","validateModel","detectConflicts","ruleIds","rule_ids","analyzeImpact","changes","getModelQuality","getOptimizationRecommendations","Object","entries","filter","_","quantity","map","option_id","parseInt","batchValidate","configurations","bulkCalculatePricing","checkHealth","getStatus","containsCode","text","some","pattern","sanitizeText","fallback","textStr","String","warn","original","substring","sanitizeObject","obj","fields","item","sanitized","keys","forEach","key","cleaned","configStore","api","_initialized","_debounceTimers","Map","_modelLoaded","initialize","$.user_effect","loadModel","_debounce","updateSelectionsOnBackend","isValid","validationResults","violations","selectedCount","values","progress","totalRequired","g","required","completedRequired","hasGroupSelection","id","Math","round","totalPrice","pricingData","total","breakdown","total_price","adjustments","safeGroups","safeOptions","isLoading","option","is_active","rules","pricingRules","pricing_rules","volumeTiers","volume_tiers","availableOptions","opt","is_selectable","reason","slice","expandedGroups","code","details","configuration","loadConfiguration","calculatePricing","saveConfiguration","isSaving","lastSaved","isDirty","updateSelection","newQuantity","find","o","group","group_id","selection_type","validation","validationData","validationErrors","available_options","checkAndApplyRequiredOptions","updateVisibleOptions","isValidating","isPricing","selectionsArray","value","isGroupExpanded","groupId","has","toggleGroup","delete","getGroupSelectionCount","isOptionAvailable","availableOption","ao","getOptionUnavailableReason","autoSelected","is_required","evaluateRuleCondition","rule","expression","match","extractRequiredOptions","thenIndex","indexOf","exportConfiguration","is_valid","pricing","currency","metadata","created","created_at","updated","updated_at","saved","hiddenOptions","isOptionVisible","reset","currentStep","fn","delay","get","set","setModelId","size","$$render","consequent","small","large","on_click","reload","on_keydown","handleClick","stopPropagation","$$props","onToggle","$.prop","expanded","$.derived","isComplete","min_selections","$.get","getOptionState","selected","available","isRequired","shouldHide","firstItem","disabled","visibleOptions","$.template_effect","$.set_text","text_3","max_selections","consequent_2","alternate_1","consequent_5","alternate_4","consequent_4","alternate_3","consequent_3","alternate_2","consequent_1","alternate","consequent_6","$.each","div_5","state","unavailableReason","selectionType","description","price","toFixed","template_effect","unavailable_reason","set_attribute","div","$.set_attribute","input","onChange","newValue","onSelectionChange","handleOptionChange","consequent_8","alternate_6","consequent_7","alternate_5","consequent_9","filterSeverity","$.set","on_click_1","__1","on_click_2","__2","on_click_3","__3","on_click_4","violation","suggestion","compact","expandedViolations","filteredViolations","severity","violationCounts","counts","critical","warning","info","handleFix","onFix","suggestions","text_2","active","text_4","text_1","each","div_4","index","isExpanded","rule_id","severityColor","getSeverityColor","div_6","__click","toggleViolation","text_7","rule_name","text_8","affected_options","$.index","$$anchor","text_9","text_11","text_10","option_name","text_12","text_13","text_14","action","consequent_12","consequent_11","consequent_10","consequent_14","text_15","rule_expression","consequent_15","consequent_16","classes_5","$0","text_6","getSeverityIcon","consequent_17","theme","apiUrl","embedMode","onComplete","onConfigurationChange","onError","dispatch","createEventDispatcher","mounted","async","handleSave","retry","onMount","document","documentElement","setAttribute","onDestroy","hasError","handleError","event","preventDefault","addEventListener","removeEventListener","toLocaleTimeString","groupOptions","expression_1","expression_2","expression_3","expression_4","isCalculating","selectedOptions","Boolean","baseTotal","reduce","sum","base_price","totalAdjustments","adj","abs","amount","finalTotal","div_8","adjustment","set_text","$1"],"mappings":"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","x_google_ignoreList":[0,1]}