networks:
  cpq-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  app_logs:
    driver: local

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cpq-database
    restart: unless-stopped
    environment:
      POSTGRES_DB: cpq_system
      POSTGRES_USER: cpq_user
      POSTGRES_PASSWORD: cpq_password
#      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - cpq-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cpq_user -d cpq_system"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Go Backend API
  cpq-backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cpq-backend
    restart: unless-stopped
    environment:
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: cpq_system
      DB_USER: cpq_user
      DB_PASSWORD: cpq_password
      DB_SSL_MODE: disable
      DB_MAX_CONNECTIONS: 25
      DB_MAX_IDLE_CONNECTIONS: 5
      DB_CONNECTION_MAX_LIFETIME: 300
#      DATABASE_URL: "postgres://cpq_user:cpq_password@postgres:5432/cpq_system?sslmode=disable"

      # Application Configuration
      APP_ENV: production
      APP_PORT: 8080
      APP_DEBUG: false
      APP_LOG_LEVEL: info

      # JWT Configuration
      JWT_SECRET: default-development-secret-change-in-production
      JWT_EXPIRY: 24h
      JWT_REFRESH_EXPIRY: 168h

      # API Configuration
      API_RATE_LIMIT: 100
      API_RATE_WINDOW: 60
      API_TIMEOUT: 30
      API_MAX_REQUEST_SIZE: 10MB

      # Performance Configuration
      CACHE_ENABLED: true
      CACHE_TTL: 300
      METRICS_ENABLED: true

      # CORS Configuration
      CORS_ALLOWED_ORIGINS: "http://localhost,http://localhost:3000,http://localhost:80,http://localhost:8080"
      CORS_ALLOWED_METHODS: GET,POST,PUT,DELETE,OPTIONS
      CORS_ALLOWED_HEADERS: Origin,Content-Type,Accept,Authorization,X-Request-ID
    ports:
      - "8080:8080"
    volumes:
      - app_logs:/app/logs
    networks:
      - cpq-network
#    depends_on:
#      postgres:
#        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "timeout 10s /app/main -health-check || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # React Frontend (Built and served by Nginx)
  cpq-frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    container_name: cpq-frontend
    restart: unless-stopped
    environment:
      # Frontend Configuration
      REACT_APP_API_URL: http://localhost:8080/api
      REACT_APP_ENV: production
      REACT_APP_VERSION: 1.0.0
      REACT_APP_ENABLE_ANALYTICS: false
    ports:
      - "80:80"
      - "443:443"
    networks:
      - cpq-network
#    depends_on:
#      cpq-backend:
#        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Database Admin - pgAdmin
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: cpq-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@cpq.local
      PGADMIN_DEFAULT_PASSWORD: cpq_pgadmin_2024
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:5050"
    volumes:
      - ./pgadmin:/var/lib/pgadmin
    networks:
      - cpq-network
    depends_on:
      - postgres
    profiles:
      - admin
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"