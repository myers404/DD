# docker-compose.yml

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cpq-postgres
    environment:
      POSTGRES_DB: cpq_db
      POSTGRES_USER: cpq_user
      POSTGRES_PASSWORD: cpq_password
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cpq_user -d cpq_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cpq-network

  # CPQ API Server
  cpq-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cpq-api
    environment:
      # Database
      DATABASE_URL: "postgres://cpq_user:cpq_password@postgres:5432/cpq_db?sslmode=disable"
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: cpq_db
      DB_USER: cpq_user
      DB_PASSWORD: cpq_password
      
      # Server
      PORT: 8080
      ENVIRONMENT: development
      
      # Authentication
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRY: 24h
      
      # Features
      ENABLE_CORS: true
      LOG_LEVEL: info
      
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    networks:
      - cpq-network
    restart: unless-stopped

  # Optional: pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: cpq-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@cpq.local
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - cpq-network
    profiles:
      - admin # Only start with: docker-compose --profile admin up

volumes:
  postgres_data:
    driver: local

networks:
  cpq-network:
    driver: bridge